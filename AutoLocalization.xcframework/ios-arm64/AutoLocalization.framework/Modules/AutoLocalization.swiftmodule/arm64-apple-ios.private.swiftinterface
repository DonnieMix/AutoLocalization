// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.2.1.6 clang-1500.1.0.1.1)
// swift-module-flags: -target arm64-apple-ios14.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AutoLocalization
// swift-module-flags-ignorable: -enable-bare-slash-regex
@_exported import AutoLocalization
import Foundation
import MLKitTranslate
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct LocalizationOptions : Swift.OptionSet {
  public init(rawValue: Swift.Int)
  public let rawValue: Swift.Int
  public static let labels: AutoLocalization.LocalizationOptions
  public static let buttons: AutoLocalization.LocalizationOptions
  public static let textfields: AutoLocalization.LocalizationOptions
  public static let toolbars: AutoLocalization.LocalizationOptions
  public static let segmentedControls: AutoLocalization.LocalizationOptions
  public static let searchBars: AutoLocalization.LocalizationOptions
  public static let all: AutoLocalization.LocalizationOptions
  public func excluding(_ options: AutoLocalization.LocalizationOptions) -> AutoLocalization.LocalizationOptions
  public typealias ArrayLiteralElement = AutoLocalization.LocalizationOptions
  public typealias Element = AutoLocalization.LocalizationOptions
  public typealias RawValue = Swift.Int
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class UILanguagePickViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct LanguageListView : SwiftUI.View {
  public init(options: AutoLocalization.LocalizationOptions, onLanguageChosenAction: ((MLKitTranslate.TranslateLanguage) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16AutoLocalization16LanguageListViewV4bodyQrvp", 0) __
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class AutoLocalization : ObjectiveC.NSObject {
  public static var shared: AutoLocalization.AutoLocalization
  public var currentSourceLanguage: MLKitTranslate.TranslateLanguage
  public var currentTargetLanguage: MLKitTranslate.TranslateLanguage
  public var currentViewControllerToLocalize: UIKit.UIViewController?
  public func translate(from sourceLanguage: MLKitTranslate.TranslateLanguage, to targetLanguage: MLKitTranslate.TranslateLanguage, _ stringToTranslate: Swift.String, completion: @escaping (Swift.String?, (any Swift.Error)?) -> Swift.Void)
  @discardableResult
  public func setViewControllerToLocalize(_ viewController: UIKit.UIViewController) -> AutoLocalization.AutoLocalization
  @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  public func localizeInterface(from sourceLanguage: MLKitTranslate.TranslateLanguage, to targetLanguage: MLKitTranslate.TranslateLanguage, options: AutoLocalization.LocalizationOptions)
  #if compiler(>=5.3) && $Sendable
  @Sendable public func handleDownloadLanguageSuccess(_ notification: Foundation.Notification)
  #endif
  #if compiler(>=5.3) && $Sendable
  @Sendable public func handleDownloadLanguageFailed(_ notification: Foundation.Notification)
  #endif
  @objc deinit
}
